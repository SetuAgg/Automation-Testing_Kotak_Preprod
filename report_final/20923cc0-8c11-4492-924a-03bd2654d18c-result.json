{"name": "Testing self learning image existence", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=131.0.6778.265); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF7307980D5+2992373]\n\t(No symbol) [0x00007FF73042BFD0]\n\t(No symbol) [0x00007FF7302C590A]\n\t(No symbol) [0x00007FF7302CC46F]\n\t(No symbol) [0x00007FF7302CF49F]\n\t(No symbol) [0x00007FF730360840]\n\t(No symbol) [0x00007FF73033F36A]\n\t(No symbol) [0x00007FF73035F584]\n\t(No symbol) [0x00007FF73033F113]\n\t(No symbol) [0x00007FF73030A918]\n\t(No symbol) [0x00007FF73030BA81]\n\tGetHandleVerifier [0x00007FF7307F6A2D+3379789]\n\tGetHandleVerifier [0x00007FF73080C32D+3468109]\n\tGetHandleVerifier [0x00007FF730800043+3418211]\n\tGetHandleVerifier [0x00007FF73058C78B+847787]\n\t(No symbol) [0x00007FF73043757F]\n\t(No symbol) [0x00007FF730432FC4]\n\t(No symbol) [0x00007FF73043315D]\n\t(No symbol) [0x00007FF730422979]\n\tBaseThreadInitThunk [0x00007FFDD62EE8D7+23]\n\tRtlUserThreadStart [0x00007FFDD723FBCC+44]", "trace": "self = <test_cases.test_my_learning_tab.Test_03_Kotak_My_Learning_Tab object at 0x000002365A89F3B0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3378940319e58d6737cfa675509bdc8b\")>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.title(\"Testing self learning image existence\")\n    def test_self_learning_img(self,setup):\n        self.driver = setup\n        self.driver.get(self.page_url)\n        self.login_lp = Kotak_Login_Page(self.driver)\n        self.login_lp.enter_username(self.username)\n        self.login_lp.enter_password(self.password)\n        self.login_lp.click_login_btn()\n        time.sleep(5)\n        self.driver.maximize_window()\n        time.sleep(3)\n        self.driver.click_my_learning_tab = Kotak_My_Learning_Tab(self.driver)\n        self.driver.click_my_learning_tab.click_my_learning_tab()\n        time.sleep(3)\n        section = self.driver.find_element(By.XPATH,'//div[@class=\"img-box_nw\"]')\n        self.driver.execute_script(\"arguments[0].scrollIntoView(true);\", section)\n        time.sleep(5)\n>       self.driver.execute_script(\"arguments[0].style.border='5px solid red'\", section)\n\ntest_cases\\test_my_learning_tab.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002365A98B740>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF730422979]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDD62EE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFDD723FBCC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=131.0.6778.265); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7307980D5+2992373]\nE       \t(No symbol) [0x00007FF73042BFD0]\nE       \t(No symbol) [0x00007FF7302C590A]\nE       \t(No symbol) [0x00007FF7302CC46F]\nE       \t(No symbol) [0x00007FF7302CF49F]\nE       \t(No symbol) [0x00007FF730360840]\nE       \t(No symbol) [0x00007FF73033F36A]\nE       \t(No symbol) [0x00007FF73035F584]\nE       \t(No symbol) [0x00007FF73033F113]\nE       \t(No symbol) [0x00007FF73030A918]\nE       \t(No symbol) [0x00007FF73030BA81]\nE       \tGetHandleVerifier [0x00007FF7307F6A2D+3379789]\nE       \tGetHandleVerifier [0x00007FF73080C32D+3468109]\nE       \tGetHandleVerifier [0x00007FF730800043+3418211]\nE       \tGetHandleVerifier [0x00007FF73058C78B+847787]\nE       \t(No symbol) [0x00007FF73043757F]\nE       \t(No symbol) [0x00007FF730432FC4]\nE       \t(No symbol) [0x00007FF73043315D]\nE       \t(No symbol) [0x00007FF730422979]\nE       \tBaseThreadInitThunk [0x00007FFDD62EE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFDD723FBCC+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "start": 1736935428110, "stop": 1736935459100, "uuid": "70e896af-714b-411b-9260-5789d7e140b2", "historyId": "8f086631563fa530dca6fb160692a21e", "testCaseId": "8f086631563fa530dca6fb160692a21e", "fullName": "test_cases.test_my_learning_tab.Test_03_Kotak_My_Learning_Tab#test_self_learning_img", "labels": [{"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_my_learning_tab"}, {"name": "subSuite", "value": "Test_03_Kotak_My_Learning_Tab"}, {"name": "host", "value": "DESKTOP-9718MUC"}, {"name": "thread", "value": "14904-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_my_learning_tab"}]}